// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

package streamergrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command int32

const (
	Command_START         Command = 0
	Command_STOP          Command = 1
	Command_FILTER_ADD    Command = 2
	Command_FILTER_REMOVE Command = 3
)

var Command_name = map[int32]string{
	0: "START",
	1: "STOP",
	2: "FILTER_ADD",
	3: "FILTER_REMOVE",
}

var Command_value = map[string]int32{
	"START":         0,
	"STOP":          1,
	"FILTER_ADD":    2,
	"FILTER_REMOVE": 3,
}

func (x Command) String() string {
	return proto.EnumName(Command_name, int32(x))
}

func (Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{0}
}

type Control struct {
	Command              Command           `protobuf:"varint,1,opt,name=command,proto3,enum=streamergrpc.Command" json:"command,omitempty"`
	Options              map[string]string `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Control) Reset()         { *m = Control{} }
func (m *Control) String() string { return proto.CompactTextString(m) }
func (*Control) ProtoMessage()    {}
func (*Control) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{0}
}

func (m *Control) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Control.Unmarshal(m, b)
}
func (m *Control) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Control.Marshal(b, m, deterministic)
}
func (m *Control) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Control.Merge(m, src)
}
func (m *Control) XXX_Size() int {
	return xxx_messageInfo_Control.Size(m)
}
func (m *Control) XXX_DiscardUnknown() {
	xxx_messageInfo_Control.DiscardUnknown(m)
}

var xxx_messageInfo_Control proto.InternalMessageInfo

func (m *Control) GetCommand() Command {
	if m != nil {
		return m.Command
	}
	return Command_START
}

func (m *Control) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

type NatsMeta struct {
	Sequence             uint64   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp            string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsMeta) Reset()         { *m = NatsMeta{} }
func (m *NatsMeta) String() string { return proto.CompactTextString(m) }
func (*NatsMeta) ProtoMessage()    {}
func (*NatsMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{1}
}

func (m *NatsMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsMeta.Unmarshal(m, b)
}
func (m *NatsMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsMeta.Marshal(b, m, deterministic)
}
func (m *NatsMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsMeta.Merge(m, src)
}
func (m *NatsMeta) XXX_Size() int {
	return xxx_messageInfo_NatsMeta.Size(m)
}
func (m *NatsMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NatsMeta proto.InternalMessageInfo

func (m *NatsMeta) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *NatsMeta) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type Message struct {
	NatsMeta             *NatsMeta `protobuf:"bytes,1,opt,name=natsMeta,proto3" json:"natsMeta,omitempty"`
	Data                 string    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{2}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetNatsMeta() *NatsMeta {
	if m != nil {
		return m.NatsMeta
	}
	return nil
}

func (m *Message) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterEnum("streamergrpc.Command", Command_name, Command_value)
	proto.RegisterType((*Control)(nil), "streamergrpc.Control")
	proto.RegisterMapType((map[string]string)(nil), "streamergrpc.Control.OptionsEntry")
	proto.RegisterType((*NatsMeta)(nil), "streamergrpc.NatsMeta")
	proto.RegisterType((*Message)(nil), "streamergrpc.Message")
}

func init() { proto.RegisterFile("main.proto", fileDescriptor_7ed94b0a22d11796) }

var fileDescriptor_7ed94b0a22d11796 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x65, 0xcb, 0x47, 0xcb, 0x80, 0xa4, 0x4e, 0xc4, 0x10, 0xe2, 0x81, 0xf4, 0x44, 0x3c, 0x54,
	0x53, 0x2f, 0x86, 0x70, 0x21, 0x50, 0xa3, 0x89, 0x88, 0x2e, 0x8d, 0x57, 0xb3, 0xc2, 0x86, 0x10,
	0xe9, 0x6e, 0xed, 0x2e, 0x26, 0xfc, 0x2f, 0x7f, 0xa0, 0x61, 0x5b, 0x10, 0x89, 0xb7, 0x99, 0x37,
	0xef, 0xbd, 0x99, 0x7d, 0x0b, 0x10, 0xb3, 0xa5, 0xf0, 0x93, 0x54, 0x6a, 0x89, 0x75, 0xa5, 0x53,
	0xce, 0x62, 0x9e, 0x2e, 0xd2, 0x64, 0xe6, 0x7d, 0x13, 0xb0, 0x87, 0x52, 0xe8, 0x54, 0xae, 0xf0,
	0x0a, 0xec, 0x99, 0x8c, 0x63, 0x26, 0xe6, 0x2d, 0xd2, 0x21, 0xdd, 0x46, 0xd0, 0xf4, 0x0f, 0xb9,
	0xfe, 0x30, 0x1b, 0xd2, 0x1d, 0x0b, 0xfb, 0x60, 0xcb, 0x44, 0x2f, 0xa5, 0x50, 0x2d, 0xab, 0x53,
	0xec, 0xd6, 0x02, 0xef, 0x58, 0x60, 0x8c, 0xfd, 0x49, 0x46, 0x0a, 0x85, 0x4e, 0x37, 0x74, 0x27,
	0x69, 0xf7, 0xa0, 0x7e, 0x38, 0x40, 0x17, 0x8a, 0x1f, 0x7c, 0x63, 0x56, 0x57, 0xe9, 0xb6, 0xc4,
	0x33, 0x28, 0x7f, 0xb1, 0xd5, 0x9a, 0xb7, 0x2c, 0x83, 0x65, 0x4d, 0xcf, 0xba, 0x25, 0xde, 0x08,
	0x9c, 0x27, 0xa6, 0xd5, 0x98, 0x6b, 0x86, 0x6d, 0x70, 0x14, 0xff, 0x5c, 0x73, 0x31, 0xe3, 0x46,
	0x5c, 0xa2, 0xfb, 0x1e, 0x2f, 0xa0, 0xaa, 0x97, 0x31, 0x57, 0x9a, 0xc5, 0x49, 0xee, 0xf2, 0x0b,
	0x78, 0x2f, 0x60, 0x8f, 0xb9, 0x52, 0x6c, 0xc1, 0x31, 0x00, 0x47, 0xe4, 0x86, 0xc6, 0xa4, 0x16,
	0x9c, 0xff, 0x7d, 0xcb, 0x6e, 0x1d, 0xdd, 0xf3, 0x10, 0xa1, 0x34, 0x67, 0x9a, 0xe5, 0xbe, 0xa6,
	0xbe, 0x1c, 0x6c, 0xe3, 0xcc, 0xd2, 0xa9, 0x42, 0x79, 0x1a, 0x0d, 0x68, 0xe4, 0x16, 0xd0, 0x81,
	0xd2, 0x34, 0x9a, 0x3c, 0xbb, 0x04, 0x1b, 0x00, 0x77, 0x0f, 0x8f, 0x51, 0x48, 0xdf, 0x06, 0xa3,
	0x91, 0x6b, 0xe1, 0x29, 0x9c, 0xe4, 0x3d, 0x0d, 0xc7, 0x93, 0xd7, 0xd0, 0x2d, 0x06, 0xf7, 0xe0,
	0xe4, 0x57, 0x29, 0xec, 0x43, 0x65, 0x6a, 0xae, 0xc0, 0xe6, 0xbf, 0xd1, 0xb6, 0x8f, 0xe0, 0x5c,
	0xe8, 0x15, 0xba, 0xe4, 0x9a, 0xbc, 0x57, 0xcc, 0x8f, 0xdf, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x29, 0xcd, 0x8a, 0xff, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessagesClient is the client API for Messages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagesClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Messages_StreamClient, error)
}

type messagesClient struct {
	cc *grpc.ClientConn
}

func NewMessagesClient(cc *grpc.ClientConn) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Messages_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messages_serviceDesc.Streams[0], "/streamergrpc.Messages/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesStreamClient{stream}
	return x, nil
}

type Messages_StreamClient interface {
	Send(*Control) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagesStreamClient struct {
	grpc.ClientStream
}

func (x *messagesStreamClient) Send(m *Control) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagesStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagesServer is the server API for Messages service.
type MessagesServer interface {
	Stream(Messages_StreamServer) error
}

func RegisterMessagesServer(s *grpc.Server, srv MessagesServer) {
	s.RegisterService(&_Messages_serviceDesc, srv)
}

func _Messages_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagesServer).Stream(&messagesStreamServer{stream})
}

type Messages_StreamServer interface {
	Send(*Message) error
	Recv() (*Control, error)
	grpc.ServerStream
}

type messagesStreamServer struct {
	grpc.ServerStream
}

func (x *messagesStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagesStreamServer) Recv() (*Control, error) {
	m := new(Control)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamergrpc.Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Messages_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
